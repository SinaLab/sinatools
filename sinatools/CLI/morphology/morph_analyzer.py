"""
About:
------
This sina_morph_analyze command processes an input text/file and returns morphological analysis for each token within the text, based on the specified language, task, and flag.

Usage:
------
Below is the usage information that can be generated by running sina_morph_analyze --help.

.. code-block:: none

    sina_morph_analyze --text=TEXT [OPTIONS]
    sina_morph_analyze --file=FILE [OPTIONS]

Options:
--------

.. code-block:: none

  --text TEXT
        The text that needs to be morphologically analyzed. 

  --file FILE
        File containing the text to be morphologically analyzed

  --language LANGUAGE [default=MSA]
        Specifies the language for the analysis. The default is MSA (Modern Standard Arabic). 
        Use other codes as appropriate for your requirements.

  --task TASK [default=full]
        Determines the specific type of morphological analysis to be performed. Available options are:
          - lemmatization: the morphological solution includes only the lemma_id, lemma, token, and token frequency.
          - pos: the morphological solution includes only the part-of-speech, token, and token frequency.
          - root: the morphological solution includes only the root, token, and token frequency.
          - full: the morphological solution includes the lemma_id, lemma, part-of-speech, root, token, and token frequency.
        The default is full.
  
  --flag FLAG [default=1]
        The flag to filter the returned results. If the flag is `1`, the solution with the highest frequency will be returned. If the flag is `*`, all solutions will be returned, ordered descendingly, with the highest frequency solution first. The default flag if not specified is `1`.

Examples:
---------

.. code-block:: none

  sina_morph_analyze --text "Your Arabic text here" --language MSA --task full --flag 1
  sina_morph_analyze --file "path/to/your/file.txt" --language MSA --task full --flag 1

"""

import argparse
from sinatools.morphology.morph_analyzer import analyze
from sinatools.utils.readfile import read_file

def main():
    parser = argparse.ArgumentParser(description='Morphological Analysis using SinaTools')
    
    # Adding arguments for the text, file, language, and task
    parser.add_argument('--text', type=str, help='Text to be morphologically analyzed')
    parser.add_argument('--file', type=str, help='File containing the text to be morphologically analyzed')
    parser.add_argument('--language', type=str, default='MSA', help='Language for analysis (default: MSA)')
    parser.add_argument('--task', type=str, default='full', choices=['lemmatization', 'pos', 'root', 'full'], help='Task for the result filter [lemmatization, pos, root, full] (default: full)')
    parser.add_argument('--flag', type=str, default='1', choices=['1','*'], help='The flag to filter the returned results')

    args = parser.parse_args()

    if args.text is None and args.file is None:
        print("Error: Either --text or --file argument must be provided.")
        return

    # Get the input either from the --text argument or from the file specified in the --file argument
    input_text = args.text if args.text else " ".join(read_file(args.file))

    # Perform morphological analysis
    results = analyze(input_text, args.language, args.task, args.flag)

    # Print the results
    for result in results:
        print(result)

if __name__ == '__main__':
    main()
